###W07_ex1_parta_start_md
**Solution:**

If $v=ru$, then differentiating produces
\begin{align*}
\pderiv{v}{r} &= u + r\pderiv{u}{r} \\
\pdderiv{v}{r} &= 2 \pderiv{u}{r} + r\pdderiv{u}{r}
\end{align*}
and hence
$$
\pdderiv{u}{r} + \frac{2}{r} \pderiv{u}{r}  = \frac{1}{r}\pdderiv{v}{r}
$$
Inserting this into the spherically symmetric form of the heat conduction equation gives
$$
\frac{1}{r} \pdderiv{v}{r} = \frac{1}{\kappa r}\pderiv{v}{t}
$$
which after cancelling out the $r$ gives the standard one-dimensional heat conduction equation.

If $v$ remains bounded for $r\to\infty$ the solution $u\to0$ for $r\to\infty$.
###W07_ex1_parta_end


###W07_ex1_partb_start_md
**Solution:**

We solve the standard one-dimensional heat conduction equation for $v(r,t) = r u(r,t)$. Since $u=\frac{v}{r}$, the boundary conditions for $v$ are
\begin{align*}
u(a,t) &= T_0 \xrightarrow{yields} v(a,t) = aT_0, \quad & t>0 \\
u(b,t) &= 0 \xrightarrow{yields} v(b,t) = 0, \quad & t>0 \\
u(r,0) &= 0 \xrightarrow{yields} v(r,0) = 0, & a\le r\le b
\end{align*}

First, we need to find the steady state solution $V(r)$ for which $v(r,t) = V(r) + w(r,t)$. Since the inner boundary is held at $aT_0$ and the outer at $0$, we get a linearly decreasing temperature from the inner to the outer boundary
$$
V(r) = aT_0\frac{b - r}{b - a}
$$

With this steady state solution we get the following boundary conditions for the transient part $w(r,t)$
\begin{align*}
w(a,t) &= 0, \quad & t>0 \\
w(b,t) &= 0, \quad & t>0 \\
w(r,0) &= -aT_0\frac{b - r}{b - a}, & a\le r\le b
\end{align*}

From the lectures we know that the solution of the one-dimensional heat conduction equation has the form
$$
w(r, t) =\sum_{N=1}^\infty e^{-\kappa \lambda_N^2 t} \left(a_N\sin(\lambda_N (r + \phi)) + b_N\cos(\lambda_N r)\right)
$$
and that we need to find the parameters $\lambda_N$, $a_N$ and $b_N$. We have added a shift of the sine so that we can better handle the boundary conditions. We can easily check that this is also a solution to the heat conduction equation.

We set $b_N=0$ for all $N$ since there is no cosine term in the sought solution and check if we can still match all boundary conditions. To match the condition at $r=a$ we shift the sine so that its argument is zero: $\phi = - a$. 

From the second boundary condition at $r=b$ we see that 
$$
\lambda_N = \frac{N\pi}{b-a}, \quad N=1,2,\dots
$$
Thus, we get
$$
w(r, t) =\sum_{N=1}^\infty a_N e^{-\kappa \lambda_N^2 t} \sin\left(\frac{r-a}{b-a}N\pi\right)
$$
and the complete solution as
$$
u(r,t) = \frac{1}{r}(V(r) + w(r,t)) =  \frac{a T_0}{r} \left[\frac{b-r}{b-a} - \sum_{N=1}^\infty A_N e^{-\kappa\lambda^2 t} \sin\left(\frac{r-a}{b-a}N\pi\right) \right]
$$
where $a_N = -aT_0 A_N$ for all $N$.

To find the parameters $A_N$ we need to solve the Fourier problem
\begin{align*}
\frac{b-r}{b-a} &= \sum_{N=1}^\infty A_N \sin\left(\frac{r-a}{b-a}N\pi\right)
\end{align*}
The coefficients can be obtained from integration or from standard tables of Fourier series as
$$
A_N = \frac{2}{\pi N}, \quad N=1,2,3,\dots
$$
###W07_ex1_partb_end


###W07_ex1_partc_start_md
**Solution:**

We have 
$$
\pdderiv{u}{r} + \frac{2}{r}\pderiv{u}{r} = \frac1\kappa\pderiv{u}{t}.
$$
Using the 2nd order finite difference approximations for the spatial derivatives and the forard first order approximation for the time derivative.

$$ \begin{align*}
\pdderiv{u}{r} &\approx \frac{u^n_{i-1}-2u_i+u_{i+1}}{\Delta r^2} \\
\pderiv{u}{r} &\approx \frac{u^n_{i+1}-u_{i+1}}{2\Delta r} \\
\pderiv{u}{t} &\approx \frac{u^{n+1}_{i}-u^n_{i}}{\Delta t} \\
\end{align*} $$

Substituting into the governing equation:

$$ \frac{u^n_{i-1}-2u^n_i+u^n_{i+1}}{\Delta r^2} + \frac{2}{r_i}\frac{u^n_{i+1}-u^n_{i+1}}{2\Delta r} = \frac1\kappa\frac{u^{n+1}_{i}-u^n_{i}}{\Delta t} $$

multiply bs by $\kappa\Delta t$

$$ \frac{\kappa\Delta t}{\Delta r^2}\left(u^n_{i-1}-2^nu_i+u^n_{i+1}\right) + \frac{\kappa\Delta t}{r_i\Delta r}\left(u^n_{i+1}-u^n_{i+1}\right) = u^{n+1}_{i}-u^n_{i}. $$

Rearranging

$$ u^{n+1}_i = u^n_i + \frac{\kappa\Delta t}{\Delta r^2}\left(u^n_{i-1}-2^nu_i+u^n_{i+1}\right) + \frac{\kappa\Delta t}{r_i\Delta r}\left(u^n_{i+1}-u^n_{i+1}\right). $$

Now the FTCS would be 
$$ u^{n+1}_i = u^n_i + R_{x_2}\left(u^n_{i-1}-2^nu_i+u^n_{i+1}\right) + R_{x_1}\left(u^n_{i+1}-u^n_{i+1}\right). $$


###W07_ex1_partc_switch_md

### Copy the grid class from the explicit parabolic solver workbook here.

###W07_ex1_partc_switch_py

import numpy as np
import matplotlib.pyplot as plt
import time

def one(t):
    '''simple function of x and t which allways returns 1.0'''
    return 1.0

class Grid:
    '''Class defining the grid for a 1D parabolic solver.  Solving
    
    $$\frac{\partial u}{\partial t}=\kappa\left(\frac{\partial^2 u}{\partial x^2}\right)$$

    The grid object contains the number of grid points (Ni), left
    and right ordinates (x0 and x1), flags for wether the boundaries
    are Dirichlet or Neumann boundary conditions and functions for
    plotting the solution both at a particular time level and in the
    form of an x-t plot.  The grid also contains the solution vector (u)
    which is stored as an array with differnt time levels, together with
    the number of time steps N_t and the (uniform) time step Delta_t.
    
    Written by Prof David Ingram, School of Engineering
    (c) 2021 The University of Edinburgh
    Licensed under CC-BY-NC.
    '''
    
    DIRICHLET_BC = 0
    NEUMANN_BC = 1

    BC_NAME = ['left', 'right']
    
    def __init__(self,ni):
        # set up information about the grid
        self.x0 = 0.0 #  left
        self.x1 = 1.0 #  right
        self.N_i = ni # grid points in i direction
        self.N_t = 0 # how many time steps we perform
        self.N_trec = 0 # how many time steps we record data at
        self.Delta_t = 0.0 # no dt value yet
        self.kappa = 1.0 # Thermal Diffusivity

        # initialise x,y and u arrays
        self.u = np.zeros((1,ni))
        self.x = np.zeros(ni)
        self.t = np.zeros(1)

        # boundary conditions (left and right )
        self.BC = [ self.DIRICHLET_BC, self.DIRICHLET_BC ]
        self.BC_fun = [ one, one ]

    def set_x0(self,x0):
        self.x0 = x0
    
    def set_x1(self,x1):
        self.x1 = x1
        
    def generate(self,Quiet=True):
        '''generate a uniformly spaced grid covering the domain from the
        x0 to the x1.  We are going to do this using linspace from
        numpy to create a list of x ordinates.'''
        self.x = np.linspace(self.x0, self.x1, self.N_i)
        if not Quiet:
            print(self)

    def initial_conditions(self,fun):
        '''set the initial conditions by calling the specified function
        fun(x) at every ordinate'''
        for i in range(self.N_i):
            self.u[0,i] = fun(self.x[i])

    def Delta_x(self):
        # calculate delta x
        return self.x[1]-self.x[0]
    
    def set_Neumann_bc(self,side):
        try:
             self.BC[self.BC_NAME.index(side)] = self.NEUMANN_BC
        except:
             print('error {} must be one of {}'.format(side,self.BC_NAME))
     
    def set_Dirichlet_bc(self,side,fun):
        '''set the Dirichlet boundary condition.  As well as the side
        this must be passed a function fun(t) which returns the value
        associated with the Dirichlet boundary at the time t.'''
        try:
            self.BC[self.BC_NAME.index(side)] = self.DIRICHLET_BC
        except:
            print('error {} must be one of {}'.format(side,self.BC_NAME))
        self.BC_fun[self.BC_NAME.index(side)] = fun

    def set_Delta_t(self,Courant_number):
        # set the time step using the Courant-Friedirchs-Lewey condition
        self.Delta_t = Courant_number * self.Delta_x()**2/(2*self.kappa) 
            
    def apply_BC(self,t):
        '''Apply the left and right boundary conditions to the values in
        the latest value of u at the current time level'''
        # left boundary
        if self.BC[0]==self.NEUMANN_BC:
            self.u[-1,0] = self.u[-1,2]
        else:
            self.u[-1,0] = self.BC_fun[0](t)
        
        # right
        if self.BC[1]==self.NEUMANN_BC:
            self.u[-1,-1] = self.u[-1,-3]
        else:
            self.u[-1,-1] = self.BC_fun[1](t)
    
    def integrate(self,t_stop,solver):
        '''call the integrator defined by solver to integrate
        the solution from t=0 to t=t_stop.'''
        
        time = 0.0
        o_time = t_stop/10
        print('Integrating to {:.3g} seconds Δt={:.3g} :'.format(t_stop,self.Delta_t),end='')
        
        # save the initial conditions as the first saved result
        self.u = np.vstack([self.u, self.u])
        self.t = np.vstack([self.t, 0.0])

        # time loop
        while True:
            # short time step at the end
            dt = min(self.Delta_t,t_stop-time)
            
            # update the boundary conditions and call the solver
            self.apply_BC(time)
            
            # update the time and save the time and results
            time += dt
            self.u[-1] = solver(self)
            self.t[-1] = time
            
            # progress monitor every o_time time intervals
            if (time >= o_time) & (time<t_stop):
                print('#',end='')
                o_time += t_stop/10
                
                # Keep the time and the solution at the recorded intervals
                self.t = np.vstack([self.t, time])
                self.u = np.vstack([self.u, self.u[-1]])
                self.N_trec += 1 # Add 1 to the counter every time we record the solution
 
            # are we done
            if time >= t_stop:
                print('. ')
                break
                
            self.N_t += 1 # Add 1 to the counter every time we perform a time step
        
    def plot(self,title):
        '''plot the solution at the current time level.  If there are
        more than 30 points in the x-direction then a line is used.'''
        if self.N_i<30:
            plt.plot(self.x,self.u[self.N_trec],'ob')
        else:
            plt.plot(self.x,self.u[self.N_trec],'-b')
        plt.xlabel('x [m]')
        plt.title(title+', t={:.4f}'.format(self.N_t*self.Delta_t))
        plt.show()
        
    def report_BC(self):
        '''compile a string listing the boundary conditions on each side.
        We build up a string of two {side name}: {BC type} pairs and
        return it'''
        
        # initialise the string
        string = ''
        
        # loop over the sides
        for side in range(2):
            # add the side name
            string = string + self.BC_NAME[side]
            # and the bounday condition type
            if self.BC[side] == self.DIRICHLET_BC:
                string = string + ': Dirichlet, '
            elif self.BC[side] == self.NEUMANN_BC:
                string = string + ': Neumann, '
        return string[:-2] +'.' # lose the last comma and space.
    
    def __str__(self):
        # describe the object when asked to print it
        describe = 'Parabolic problem, 𝜅={:.3g}\n'.format(self.kappa)
        describe += 'Uniform {} node grid from {} to {}.\n'.format(self.N_i, self.x0, self.x1)
        describe += 'Boundaries conditions are - ' + self.report_BC()
        if self.N_t==0:
            describe += '\nInitial conditions at t=0.0, Δt={:.3g} seconds'.format(self.Delta_t)
        else:
            describe += '\n{} time steps from t=0.0 to t={:.3g}, Δt={:.3g} seconds'.format(self.N_t+1,self.N_t*self.Delta_t,self.Delta_t)
        return describe

###W07_ex1_partc_switch_md

### Now that we have copied the Grid class from the Explicit-Parabolic Solver workbook, we can set up the problem.

###W07_ex1_partc_switch_py

# Define functions for boundary conditions
def hot_bc(x): return 100.0

def cold_bc(x): return 0.0

# Define function for initial condition
def u_init(x): return 0.0*x

# Construct grid
test = Grid(101) 

# Set x limits
test.set_x0(0.1) 
test.set_x1(1.0) 

# Generate grid 
test.generate() 

# Set time step (dt) - The Courant number is given as input
test.set_Delta_t(0.95) 

# Set boundary conditions - Need to pass the functions as inputs
test.set_Dirichlet_bc('right',cold_bc) 
test.set_Dirichlet_bc('left',hot_bc) 

# Set initial conditions
test.initial_conditions(u_init) 

###W07_ex1_partc_switch_md

### Now implement the function for the spherical FTCS scheme and calculate the solution after 1.0 seconds

###W07_ex1_partc_switch_py

def FTCS_sphere(grid): 
    '''perform one time step using the FTCS for the 
    spherically symmetric heat transfer equation on 
    the parabolic problem defined by grid. 
    We are using whole array opperations for speed.''' 
    
    # Calculate coefficients Rx2 and Rx1
    Rx2 = grid.kappa*grid.Delta_t/(grid.Delta_x()**2) 
    Rx1 = grid.kappa*grid.Delta_t/(grid.x*grid.Delta_x())
    
    # Write the FTCS scheme
    u = grid.u[-1].copy()
    u[1:-1]=u[1:-1]+Rx2*(u[0:-2]-2*u[1:-1]+u[2:])+Rx1[1:-1]*(u[2:]-u[0:-2]) # Whole array operations
    return u

# Calculate solution after 1.0 second

test.integrate(1.0, FTCS_sphere) 
test.plot('Spherical heat transfer') 
print(test)

###W07_ex1_partc_switch_md

###W07_ex1_partc_end
